@using BSFlixFlex.Models;
@using BSFlixFlex.Pages.Pagination;
@using BSFlixFlex.Services;
@using System.Security.Claims;
@typeparam T where T : class, IDiscovryCommonProperty
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
<div class="g-col-12">
    <div class="grid row row-cols g-2">
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                var imgUrl = $"https://image.tmdb.org/t/p/w500/" + item.PosterPath;
                var header = string.Empty;
                var pageUri = string.Empty;
                Cinematography cin = Cinematography.Movie;
                if (item is Movie movie)
                {
                    header = movie.Title;
                    pageUri = "films";
                    cin = Cinematography.Movie;
                }
                if (item is TvShow tvShow)
                {
                    header = tvShow.Title;
                    pageUri = "series";
                    cin = Cinematography.Tv;
                }
                string resultat = string.Empty;
                if (item.Overview != null)
                {
                    if (item.Overview.Length > 100)
                    {
                        resultat = item.Overview.Substring(0, 100);
                        int dernierEspace = resultat.LastIndexOf(" ");
                        resultat = item.Overview.Substring(0, dernierEspace) + "...";
                    }
                    else
                    {
                        resultat = item.Overview;
                    }
                }
                var href = $"/{pageUri}/{item.Id}";

                <div class="col">
                    <div class="card h-100 mb-1 g-col-md-1" style="width: 15rem;">
                        <img src="@imgUrl" class="card-img-top" alt="...">
                        <div class="card-header">
                            @header
                        </div>
                        <div class="card-body">

                            <p class="card-text">@resultat</p>
                        </div>
                        <div class="card-footer">
                            <a class="btm btm-info" href="@href">plus info </a>
                            @if (isFavori(item.Id ?? 0, cin).Result)
                            {
                                <button @onclick="@(() => RemoveFavori(item.Id??0, cin))">supprime de mes favorie</button>
                            }
                            else
                            {
                                <button @onclick="@(() => AddFavori(item.Id??0, cin))">ajoute a de mes favorie</button>
                            }
                        </div>
                    </div>
                </div>


            }

        }
    </div>
    <GridPaging PaginationState="PagingState" />
</div>
@code {
    [Inject]
    public required MyFavoriteService MyFavoriService { get; set; }
    [Parameter, EditorRequired] public required ICollection<T> Items { get; set; }
    [Parameter, EditorRequired] public required GridPagingState PagingState { get; set; }
    [Parameter, EditorRequired] public required string PageUri { get; set; }
    public ClaimsPrincipal ClaimsPrincipal { get; set; } = default!;
    public bool IsAuthenticated => GetIsAuthenticated();

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal = authenticationState.User;
        await base.OnInitializedAsync();
    }

    private bool GetIsAuthenticated()
    {
        if (ClaimsPrincipal.Identity is { IsAuthenticated: true })
            return true;
        return false;
    }

    private async Task<bool> isFavori(int id, Cinematography cinematography)
    {
        var _ = await MyFavoriService.IsFavoriteAsync(id, cinematography);
        return _;
    }
    private async void AddFavori(int id, Cinematography cinematography)
    {
        if (IsAuthenticated)
        {
            await MyFavoriService.AddToFavoritesAsync(id, cinematography);
            //await OnStateHasChange.InvokeAsync();
            StateHasChanged();
        }
        else
        {
            GoLogin();

        }
    }
    private async void RemoveFavori(int id, Cinematography cinematography)
    {
        if (IsAuthenticated)
        {
            await MyFavoriService.RemoveFromFavoritesAsync(id, cinematography);
            //await OnStateHasChange.InvokeAsync();
            StateHasChanged();
        }
        else
        {
            GoLogin();
        }
    }
    private void GoLogin()
    {
        var returnUrl = Uri.EscapeDataString(NavManager.Uri);
        returnUrl = $"~/{PageUri}";
        NavManager.NavigateTo($"/Identity/Account/Login?returnUrl={returnUrl}", true);
    }
}
